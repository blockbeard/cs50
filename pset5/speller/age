GETRUSAGE(2)                                           Linux Programmer's Manual                                           GETRUSAGE(2)



NNAAMMEE
       getrusage - get resource usage

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//ttiimmee..hh>>
       ##iinncclluuddee <<ssyyss//rreessoouurrccee..hh>>

       iinntt ggeettrruussaaggee((iinntt _w_h_o,, ssttrruucctt rruussaaggee **_u_s_a_g_e));;

DDEESSCCRRIIPPTTIIOONN
       ggeettrruussaaggee() returns resource usage measures for _w_h_o, which can be one of the following:

       RRUUSSAAGGEE__SSEELLFF
              Return  resource  usage  statistics  for  the  calling  process, which is the sum of resources used by all threads in the
              process.

       RRUUSSAAGGEE__CCHHIILLDDRREENN
              Return resource usage statistics for all children of the calling process that have terminated and been waited for.  These
              statistics  will  include the resources used by grandchildren, and further removed descendants, if all of the intervening
              descendants waited on their terminated children.

       RRUUSSAAGGEE__TTHHRREEAADD (since Linux 2.6.26)
              Return resource usage statistics for the calling thread.

       The resource usages are returned in the structure pointed to by _u_s_a_g_e, which has the following form:

           struct rusage {
               struct timeval ru_utime; /* user CPU time used */
               struct timeval ru_stime; /* system CPU time used */
               long   ru_maxrss;        /* maximum resident set size */
               long   ru_ixrss;         /* integral shared memory size */
               long   ru_idrss;         /* integral unshared data size */
               long   ru_isrss;         /* integral unshared stack size */
               long   ru_minflt;        /* page reclaims (soft page faults) */
               long   ru_majflt;        /* page faults (hard page faults) */
               long   ru_nswap;         /* swaps */
               long   ru_inblock;       /* block input operations */
               long   ru_oublock;       /* block output operations */
               long   ru_msgsnd;        /* IPC messages sent */
               long   ru_msgrcv;        /* IPC messages received */
               long   ru_nsignals;      /* signals received */
               long   ru_nvcsw;         /* voluntary context switches */
               long   ru_nivcsw;        /* involuntary context switches */
           };

       Not all fields are completed; unmaintained fields are set to zero by the kernel.  (The unmaintained fields are provided for com‐
       patibility with other systems, and because they may one day be supported on Linux.)  The fields are interpreted as follows:

       _r_u___u_t_i_m_e
              This  is  the total amount of time spent executing in user mode, expressed in a _t_i_m_e_v_a_l structure (seconds plus microsec‐
              onds).

       _r_u___s_t_i_m_e
              This is the total amount of time spent executing in kernel mode, expressed in a _t_i_m_e_v_a_l structure (seconds plus microsec‐
              onds).

       _r_u___m_a_x_r_s_s (since Linux 2.6.32)
              This  is  the  maximum  resident set size used (in kilobytes).  For RRUUSSAAGGEE__CCHHIILLDDRREENN, this is the resident set size of the
              largest child, not the maximum resident set size of the process tree.

       _r_u___i_x_r_s_s (unmaintained)
              This field is currently unused on Linux.

       _r_u___i_d_r_s_s (unmaintained)
              This field is currently unused on Linux.

       _r_u___i_s_r_s_s (unmaintained)
              This field is currently unused on Linux.

       _r_u___m_i_n_f_l_t
              The number of page faults serviced without any I/O activity; here I/O activity is avoided by “reclaiming”  a  page  frame
              from the list of pages awaiting reallocation.

       _r_u___m_a_j_f_l_t
              The number of page faults serviced that required I/O activity.

       _r_u___n_s_w_a_p (unmaintained)
              This field is currently unused on Linux.

       _r_u___i_n_b_l_o_c_k (since Linux 2.6.22)
              The number of times the filesystem had to perform input.

       _r_u___o_u_b_l_o_c_k (since Linux 2.6.22)
              The number of times the filesystem had to perform output.

       _r_u___m_s_g_s_n_d (unmaintained)
              This field is currently unused on Linux.

       _r_u___m_s_g_r_c_v (unmaintained)
              This field is currently unused on Linux.

       _r_u___n_s_i_g_n_a_l_s (unmaintained)
              This field is currently unused on Linux.

       _r_u___n_v_c_s_w (since Linux 2.6)
              The  number of times a context switch resulted due to a process voluntarily giving up the processor before its time slice
              was completed (usually to await availability of a resource).

       _r_u___n_i_v_c_s_w (since Linux 2.6)
              The number of times a context switch resulted due to a higher priority process becoming runnable or because  the  current
              process exceeded its time slice.

RREETTUURRNN VVAALLUUEE
       On success, zero is returned.  On error, -1 is returned, and _e_r_r_n_o is set appropriately.

EERRRROORRSS
       EEFFAAUULLTT _u_s_a_g_e points outside the accessible address space.

       EEIINNVVAALL _w_h_o is invalid.

CCOONNFFOORRMMIINNGG TTOO
       SVr4, 4.3BSD.  POSIX.1-2001 specifies ggeettrruussaaggee(), but specifies only the fields _r_u___u_t_i_m_e and _r_u___s_t_i_m_e.

       RRUUSSAAGGEE__TTHHRREEAADD is Linux-specific.

NNOOTTEESS
       Resource usage metrics are preserved across an eexxeeccvvee(2).

       Including  _<_s_y_s_/_t_i_m_e_._h_>  is  not  required  these  days,  but  increases  portability.   (Indeed,  _s_t_r_u_c_t  _t_i_m_e_v_a_l is defined in
       _<_s_y_s_/_t_i_m_e_._h_>.)

       In Linux kernel versions before 2.6.9, if the disposition of SSIIGGCCHHLLDD is set to SSIIGG__IIGGNN then the resource usages  of  child  pro‐
       cesses  are  automatically  included  in the value returned by RRUUSSAAGGEE__CCHHIILLDDRREENN, although POSIX.1-2001 explicitly prohibits this.
       This nonconformance is rectified in Linux 2.6.9 and later.

       The structure definition shown at the start of this page was taken from 4.3BSD Reno.

       Ancient systems provided a vvttiimmeess() function with a similar purpose to ggeettrruussaaggee().  For backward compatibility, glibc also pro‐
       vides vvttiimmeess().  All new applications should be written using ggeettrruussaaggee().

       See also the description of _/_p_r_o_c_/_P_I_D_/_s_t_a_t in pprroocc(5).

SSEEEE AALLSSOO
       cclloocckk__ggeettttiimmee(2), ggeettrrlliimmiitt(2), ttiimmeess(2), wwaaiitt(2), wwaaiitt44(2), cclloocckk(3)

CCOOLLOOPPHHOONN
       This page is part of release 3.54 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, and information about reporting
       bugs, can be found at http://www.kernel.org/doc/man-pages/.



Linux                                                          2010-09-26                                                  GETRUSAGE(2)
